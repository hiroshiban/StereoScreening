% MULTIPLE EVENT EXPERIMENTAL DESIGN EXPLORATIONS
% 
% ____________
% PAPER PLOTS
%-------------
% THEORY PAPER NIMG 770
%--------------
% plot_nipaper01.m -- Figures  1 and 2
% plot_ms1b_basis2.m -- Figure 3
% plot_ms1b_nc2.m -- Figure 4
% 
% 
%--------------
% DESIGN PAPER NIMG771
%--------------
% plot_blockpermute -- Figure 1
% plot_nuisance2 - Figure 2 
% plotclump4.m -- Figures 3,4, 7 and 8
% show_mlimit_ent.m  --  Figure 5
% plot_cluster_examp -- Figure 6
%
% ------------------
% SIMULATION SCRIPTS
% ------------------
% multsim.m: obsolete
%
% multsim1.m: main sim program 
%             (need to add better handling of rank deficiency)
%             NOTE: for the original set of data this was
%                   run with batch_ms1.m
%                   with numperm = 200 and numpermrand = 1000
%             
%
% multsim2.m: almost the same as multsim1.m with the main difference
%             being that it calls calc_meffdet -- this is
%             a litle slower because calc_meffdet is more general so
%             ends up recalculating the design matrix
%
% multsim3.m: based on multsim2.m with modifications to look at
%             correlated noise and basis function expansions
%       
%
% tryclump.m: simulations to explore clumping and declumping algorithms
%             (use plotclump.m to plot out results).
%              uses calc_meffdet.m
%
% tryhybrid.m: quick and dirty script to make a hybrid (mixed) sequence
%              that achieves a good trade-off between efficiency and
%              power.
%
% ----------------
% m-sequence stuff
% ----------------
%  calc_freq.m: finds frequency of occurrence for each trial type.
%
%  find_m11.m:  find taps for base 11 m-sequence.
%
% ----------------
% Noise Stuff
% ----------------
%  try_noise1.m: looking at theoretical approximations to effect
%                of correlated noise. 
%
% ----------------
% Utility Functions
% ----------------
%  clumpvec.m: algorithm for clumping a random sequence
%
%  compress_clump.m: used for reducing the number of points obtained by
%                    clumping, basic idea is that we divide up the
%                    efficiency into bins and within each bin find the
%                    min,median, and maximum detection power
%                    the associated estimation efficiencies are also output
%
%
% 
% ----------------
% PLOTTING SCRIPTS
% ----------------
%
% plot_clump.m: plot out results from tryclump.m
%
% plotclump_sparse.m: plot out results from tryclump.m in a sparse fashion.
% 
% plot_ms1: for a given k (nevents) plots out jellyfish for all lorders
%
% plot_ms1_m: loops over filenames, plotting out jellyfish 
%
% plot_ms1b: supersedes plot_ms1_m.m
%
% plot_mrm03: make plots for ismrm 2003 conference
%
% show_mlimit: shows how close m-sequences come to the theoretical
%              bound on efficiency. 
% --------
% MATFILES
% --------
% naming convention is as follows:
%
% for files generated by multsim1.m 
%  
%   ne[nevents] l[order string] no[numones] z[zeroarea?] ds[doshift?] c[doclump?]
%
%   example:   ne2l0123no80z0ds2c1.mat
%
% for files generated by multsim2.m 
%
%   ne[nevents] l[order string] no[numones] z[zeroarea?] ds[doshift?] c[doclump?] v2
% 
%   example:   ne2l0123no80z0ds2c1v2.mat
%
%
% % for files generated by multsim3.m 
%
%   ne[nevents] l[order string] no[numones] z[zeroarea?] ds[doshift?]
%   c[doclump?] v3 cn[docolornoise?] ba[dobasis?] 
% 
%   example:   ne2l0123no80z0ds2c1v3cn0ba0.mat
%
% for files generated by tryclump.m
%
%   clumped:           cl ne[nevents] l[order string] npe[numperm] np[npaths]       
%
%   block(de-clumped): bl ne[nevents] l[order string] npe[numperm]
%                       np[npaths] nb[numblocks]
%
% Note: for files generated by tryclump.m , the npaths parameter is used
% to try out different randomly generated permutations. 
% this is useful for searching for a good designs. 
